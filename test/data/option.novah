// Functions to work with optional values.
// and then some
module novah.option

foreign import java.util.Optional

// Maps the function over this option if it has a value.
// Runtime: O(1)
pub
map : (a -> b) -> Option a -> Option b
map f = case _ of
  Some x -> Some (f x)
  None -> None

// Maps the function over this option if it has a value,
// but don't wrap the result in another option.
// Runtime: O(1)
pub
flatMap : (a -> Option b) -> Option a -> Option b
flatMap f opt = case opt of
  Some x -> f x
  None -> None

// Takes a default value, a function and an option
// and returns the result of the function applied to this option's value
// or the default value if the option is empty.
pub
maybe : b -> (a -> b) -> Option a -> b
maybe def f = case _ of
  Some x -> f x
  None -> def

// Returns true if this option contains a value.
pub
some? : Option a -> Boolean
some? = case _ of
  Some _ -> true
  None -> false